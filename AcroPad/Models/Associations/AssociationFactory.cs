using Sgry.Azuki;

namespace AcroPad.Models.Associations
{
    /// <summary>
    /// 関連付け情報を構築するファクトリークラスを表します。
    /// </summary>
    public static class AssociationFactory
    {
        /// <summary>
        /// 新しいインスタンスを取得します。
        /// </summary>
        /// <param name="mode">言語の種類</param>
        /// <returns>インスタンス</returns>
        public static Association CreateInstance(LanguageKind mode)
        {
            switch (mode)
            {
                case LanguageKind.Text:
                    return CreateInstanceForText();
                case LanguageKind.Cpp:
                    return CreateInstanceForCpp();
                case LanguageKind.CSharp:
                    return CreateInstanceForCSharp();
                case LanguageKind.Java:
                    return CreateInstanceForJava();
                case LanguageKind.Python:
                    return CreateInstanceForPython();
                case LanguageKind.Ruby:
                    return CreateInstanceForRuby();
                case LanguageKind.JavaScript:
                    return CreateInstanceForJavaScript();
                case LanguageKind.PlSql:
                    return CreateInstanseForPlSql();
                case LanguageKind.Xml:
                    return CreateInstanceForXml();
                case LanguageKind.BatchFile:
                    return CreateInstanceForBatch();
                case LanguageKind.Ini:
                    return CreateInstanceForIni();
                default:
                    return null;
            }
        }

        private static Association CreateInstanceForText()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.Text,
                AutoIndentMode = AutoIndentKind.None,
                DisplayName = "テキスト",
                Extensions = new[] { ".txt" },
            };
        }

        private static Association CreateInstanceForCpp()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.Cpp,
                AutoIndentMode = AutoIndentKind.C,
                DisplayName = "C/C++",
                Extensions = new[] { ".c", ".cpp", ".cxx", ".cc", ".cp", ".h", ".hpp", ".hxx", ".hh", ".hp" },
                KeywordSet = new[]
                {
                    new KeywordPattern(
                        new[]
                        {
                            "asm",
                            "auto",
                            "bool",
                            "break",
                            "case",
                            "catch",
                            "char",
                            "class",
                            "const",
                            "const_cast",
                            "continue",
                            "default",
                            "delete",
                            "do",
                            "double",
                            "dynamic_cast",
                            "else",
                            "enum",
                            "explicit",
                            "export",
                            "extern",
                            "false",
                            "float",
                            "for",
                            "friend",
                            "goto",
                            "if",
                            "inline",
                            "int",
                            "long",
                            "mutable",
                            "namespace",
                            "new",
                            "operator",
                            "private",
                            "protected",
                            "public",
                            "register",
                            "reinterpret_cast",
                            "return",
                            "short",
                            "signed",
                            "sizeof",
                            "static",
                            "static_cast",
                            "struct",
                            "switch",
                            "template",
                            "this",
                            "throw",
                            "true",
                            "try",
                            "typedef",
                            "typeid",
                            "typename",
                            "union",
                            "unsigned",
                            "using",
                            "virtual",
                            "void",
                            "volatile",
                            "while",
                        },
                        CharClass.Keyword),
                    new KeywordPattern(
                        new[]
                        {
                            "__FILE__",
                            "__LINE__",
                            "NULL",
                            "offsetof",
                            "ptrdiff_t",
                            "size_t",
                            "u_char",
                            "u_int",
                            "u_long",
                            "u_short",
                            "wchar_t",
                        },
                        CharClass.Keyword2),
                    new KeywordPattern(
                        new[]
                        {
                            "BOOL",
                            "BYTE",
                            "DWORD",
                            "DWORD_PTR",
                            "FALSE",
                            "HANDLE",
                            "HRESULT",
                            "HWND",
                            "INT_PTR",
                            "LONG_PTR",
                            "LPARAM",
                            "LRESULT",
                            "NULL",
                            "TCHAR",
                            "TRUE",
                            "WORD",
                            "WPARAM"
                        },
                        CharClass.Keyword3),
                    new KeywordPattern(
                        new[]
                        {
                            "#define",
                            "#elif",
                            "#else",
                            "#endif",
                            "#error",
                            "#if",
                            "#ifdef",
                            "#ifndef",
                            "#import",
                            "#include",
                            "#line",
                            "#pragma",
                            "#undef",
                        },
                        CharClass.Macro)
                },
                Texts = new[]
                {
                    new TextPattern("\"", "\"", '\\', CharClass.String),
                    new TextPattern("'", "'", '\\', CharClass.String),
                    new TextPattern("/*", "*/", CharClass.Comment, true),
                    new TextPattern("//", CharClass.Comment),
                },
            };
        }

        private static Association CreateInstanceForCSharp()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.CSharp,
                AutoIndentMode = AutoIndentKind.C,
                DisplayName = "C#",
                Extensions = new[] { ".cs" },
                KeywordSet = new[]
                {
                    new KeywordPattern(
                        new[]
                        {
                            "abstract",
                            "add",
                            "alias",
                            "as",
                            "ascending",
                            "async",
                            "await",
                            "base",
                            "bool",
                            "break",
                            "by",
                            "byte",
                            "case",
                            "catch",
                            "char",
                            "checked",
                            "class",
                            "const",
                            "continue",
                            "decimal",
                            "default",
                            "delegate",
                            "descending",
                            "do",
                            "double",
                            "dynamic",
                            "else",
                            "enum",
                            "equals",
                            "event",
                            "explicit",
                            "extern",
                            "false",
                            "finally",
                            "fixed",
                            "float",
                            "for",
                            "foreach",
                            "from",
                            "get",
                            "global",
                            "goto",
                            "group",
                            "if",
                            "implicit",
                            "in",
                            "int",
                            "interface",
                            "internal",
                            "into",
                            "is",
                            "join",
                            "let",
                            "lock",
                            "long",
                            "nameof",
                            "namespace",
                            "new",
                            "null",
                            "object",
                            "on",
                            "operator",
                            "orderby",
                            "out",
                            "override",
                            "params",
                            "partial",
                            "private",
                            "protected",
                            "public",
                            "readonly",
                            "ref",
                            "remove",
                            "return",
                            "sbyte",
                            "sealed",
                            "select",
                            "set",
                            "short",
                            "sizeof",
                            "stackalloc",
                            "static",
                            "string",
                            "struct",
                            "switch",
                            "this",
                            "throw",
                            "true",
                            "try",
                            "typeof",
                            "uint",
                            "ulong",
                            "unchecked",
                            "unsafe",
                            "ushort",
                            "using",
                            "value",
                            "var",
                            "virtual",
                            "void",
                            "volatile",
                            "when",
                            "where",
                            "while",
                            "yield",
                        },
                        CharClass.Keyword),
                    new KeywordPattern(
                        new[]
                        {
                            "#define",
                            "#elif",
                            "#else",
                            "#endif",
                            "#endregion",
                            "#error",
                            "#if",
                            "#line",
                            "#pragma",
                            "#region",
                            "#undef",
                            "#warning",
                        },
                        CharClass.Macro),
                },
                Texts = new[]
                {
                    new TextPattern("@\"", "\"", '\"', CharClass.String, true),
                    new TextPattern("\"", "\"", '\\', CharClass.String),
                    new TextPattern("'", "'", '\\', CharClass.String),
                    new TextPattern("/*", "*/", CharClass.Comment, true),
                    new TextPattern("///", CharClass.DocComment),
                    new TextPattern("//", CharClass.Comment),
                },
            };
        }

        private static Association CreateInstanceForJava()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.Java,
                AutoIndentMode = AutoIndentKind.C,
                DisplayName = "Java",
                Extensions = new[] { ".java", },
                KeywordSet = new[]
                {
                    new KeywordPattern(
                        new[]
                        {
                            "abstract",
                            "assert",
                            "boolean",
                            "break",
                            "byte",
                            "case",
                            "catch",
                            "char",
                            "class",
                            "const",
                            "continue",
                            "default",
                            "do",
                            "double",
                            "else",
                            "enum",
                            "extends",
                            "final",
                            "finally",
                            "float",
                            "for",
                            "goto",
                            "if",
                            "implements",
                            "import",
                            "instanceof",
                            "int",
                            "interface",
                            "long",
                            "native",
                            "new",
                            "package",
                            "private",
                            "protected",
                            "public",
                            "return",
                            "short",
                            "static",
                            "strictfp",
                            "super",
                            "switch",
                            "synchronized",
                            "this",
                            "throw",
                            "throws",
                            "transient",
                            "try",
                            "void",
                            "volatile",
                            "while",
                        },
                        CharClass.Keyword),
                },
                Texts = new[]
                {
                    new TextPattern("\"", "\"", '\\', CharClass.String, false),
                    new TextPattern("'", "'", '\\', CharClass.String, false),
                    new TextPattern("/**", "*/", CharClass.DocComment),
                    new TextPattern( "/*", "*/", CharClass.Comment),
                    new TextPattern( "//", CharClass.Comment),
                },
            };
        }

        private static Association CreateInstanceForPython()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.Python,
                AutoIndentMode = AutoIndentKind.Python,
                DisplayName = "Python",
                Extensions = new[] { ".py" },
                KeywordSet = new[]
                {
                    new KeywordPattern(
                        new[]
                        {
                            "and",
                            "as",
                            "assert",
                            "break",
                            "continue",
                            "del",
                            "elif",
                            "else",
                            "except",
                            "finally",
                            "for",
                            "from",
                            "global",
                            "if",
                            "import",
                            "in",
                            "lambda",
                            "nonlocal",
                            "not",
                            "or",
                            "pass",
                            "raise",
                            "return",
                            "try",
                            "while",
                            "with",
                        },
                        CharClass.Keyword),
                    new KeywordPattern(
                        new[]
                        {
                            "False",
                            "None",
                            "True",
                        },
                        CharClass.Keyword2),
                },
                Texts = new[]
                {
                    new TextPattern("r\"\"\"", "\"\"\"", CharClass.String, true),
                    new TextPattern("R\"\"\"", "\"\"\"", CharClass.String, true),
                    new TextPattern("\"\"\"", "\"\"\"", CharClass.String, true),
                    new TextPattern("r'''", "'''", CharClass.String, true),
                    new TextPattern("R'''", "'''", CharClass.String, true),
                    new TextPattern("'''", "'''", CharClass.String, true),
                    new TextPattern("r\"", "\"", '\\', CharClass.String),
                    new TextPattern("R\"", "\"", '\\', CharClass.String),
                    new TextPattern("\"", "\"", '\\', CharClass.String),
                    new TextPattern("r'", "'", '\\', CharClass.String),
                    new TextPattern("R'", "'", '\\', CharClass.String),
                    new TextPattern("'", "'", '\\', CharClass.String),
                    new TextPattern( "#", CharClass.Comment),
                },
                Regex = new[]
                {
                    new RegexPattern(@"(class)\s+(\w+)\(", new[] { CharClass.Keyword, CharClass.Class }),
                    new RegexPattern(@"(def)\s+(\w+)\(", new[] { CharClass.Keyword, CharClass.Function }),
                },
            };
        }

        private static Association CreateInstanceForRuby()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.Ruby,
                AutoIndentMode = AutoIndentKind.Smart,
                DisplayName = "Ruby",
                Extensions = new[] { ".rb" },
                KeywordSet = new[]
                {
                   new KeywordPattern(
                       new[]
                       {
                           "alias",
                            "and",
                            "begin",
                            "BEGIN",
                            "break",
                            "case",
                            "class",
                            "def",
                            "defined",
                            "do",
                            "else",
                            "elsif",
                            "end",
                            "END",
                            "ensure",
                            "false",
                            "for",
                            "if",
                            "in",
                            "module",
                            "next",
                            "nil",
                            "not",
                            "or",
                            "redo",
                            "rescue",
                            "retry",
                            "return",
                            "self",
                            "super",
                            "then",
                            "true",
                            "undef",
                            "unless",
                            "until",
                            "when",
                            "while",
                            "yield",
                       },
                       CharClass.Keyword
                    )
                },
                Texts = new[]
                {
                    new TextPattern("\"", "\"", '\\', CharClass.String, true),
                    new TextPattern("'", "'", '\\', CharClass.String, true),
                    new TextPattern("=begin", "=end", CharClass.DocComment, true),
                    new TextPattern("#", CharClass.Comment),
                },
            };
        }
        private static Association CreateInstanceForJavaScript()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.JavaScript,
                AutoIndentMode = AutoIndentKind.C,
                DisplayName = "JavaScript",
                Extensions = new[] { ".js", },
                KeywordSet = new[]
                {
                    new KeywordPattern(
                        new[]
                        {
                            "break",
                            "case",
                            "catch",
                            "class",
                            "const",
                            "continue",
                            "debugger",
                            "default",
                            "delete",
                            "do",
                            "else",
                            "enum",
                            "export",
                            "extends",
                            "finally",
                            "for",
                            "function",
                            "if",
                            "implements",
                            "import",
                            "in",
                            "instanceof",
                            "interface",
                            "let",
                            "new",
                            "package",
                            "private",
                            "protected",
                            "prototype",
                            "public",
                            "return",
                            "static",
                            "super",
                            "switch",
                            "this",
                            "throw",
                            "try",
                            "typeof",
                            "var",
                            "void",
                            "while",
                            "with",
                        },
                        CharClass.Keyword),
                    new KeywordPattern(
                        new[]
                        {
                            "false",
                            "null",
                            "true",
                            "undefined",
                        },
                        CharClass.Keyword2),
                },
                Texts = new[]
                {
                    new TextPattern( "'", "'", '\\', CharClass.String),
                    new TextPattern("\"", "\"", '\\', CharClass.String),
                    new TextPattern("/*", "*/", CharClass.Comment, true),
                    new TextPattern("//", CharClass.Comment),
                },
                Regex = new[]
                {
                    new RegexPattern(@"(?<!\w\s*)/([^/\\]|\\.)+/[a-z]*", CharClass.Regex, false),
                }
            };
        }

        private static Association CreateInstanseForPlSql()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.PlSql,
                AutoIndentMode = AutoIndentKind.Smart,
                DisplayName = "PL/SQL",
                Extensions = new[] { ".sql", ".plsql" },
                KeywordSet = new[]
                {
                    new KeywordPattern(
                        new[]
                        {
                            "ABSOLUTE",
                            "ACTION",
                            "ADD",
                            "ADMIN",
                            "AFTER",
                            "AGGREGATE",
                            "ALIAS",
                            "ALL",
                            "ALLOCATE",
                            "ALTER",
                            "AND",
                            "ANY",
                            "ARE",
                            "ARRAY",
                            "AS",
                            "ASC",
                            "ASSERTION",
                            "AT",
                            "AUTHORIZATION",
                            "AVG",
                            "BEFORE",
                            "BEGIN",
                            "BETWEEN",
                            "BINARY",
                            "BIT",
                            "BIT_LENGTH",
                            "BLOB",
                            "BOOLEAN",
                            "BOTH",
                            "BREADTH",
                            "BY",
                            "CALL",
                            "CASCADE",
                            "CASCADED",
                            "CASE",
                            "CAST",
                            "CATALOG",
                            "CHAR",
                            "CHAR_LENGTH",
                            "CHARACTER",
                            "CHARACTER_LENGTH",
                            "CHECK",
                            "CLASS",
                            "CLOB",
                            "CLOSE",
                            "COALESCE",
                            "COBOL",
                            "COLLATE",
                            "COLLATION",
                            "COLUMN",
                            "COMMIT",
                            "COMPLETION",
                            "CONDITION",
                            "CONNECT",
                            "CONNECTION",
                            "CONSTRAINT",
                            "CONSTRAINTS",
                            "CONSTRUCTOR",
                            "CONTINUE",
                            "CONVERT",
                            "CORRESPONDING",
                            "COUNT",
                            "CREATE",
                            "CROSS",
                            "CUBE",
                            "CURRENT",
                            "CURRENT_DATE",
                            "CURRENT_PATH",
                            "CURRENT_ROLE",
                            "CURRENT_TIME",
                            "CURRENT_TIMESTAMP",
                            "CURRENT_USER",
                            "CURSOR",
                            "CYCLE",
                            "DATA",
                            "DATE",
                            "DAY",
                            "DEALLOATE",
                            "DEC",
                            "DECIMAL",
                            "DECLARE",
                            "DEFAULT",
                            "DEFERRABLE",
                            "DEFERRED",
                            "DELETE",
                            "DEPTH",
                            "DEREF",
                            "DESC",
                            "DESCRIBE",
                            "DESCRIPTOR",
                            "DESTROY",
                            "DESTRUCTOR",
                            "DETERMINISTIC",
                            "DIAGNOSTICS",
                            "DICTIONARY",
                            "DISCONNECT",
                            "DISTINCT",
                            "DO",
                            "DOMAIN",
                            "DOUBLE",
                            "DROP",
                            "DYNAMIC",
                            "EACH",
                            "ELSE",
                            "ELSEIF",
                            "END",
                            "END-EXEC",
                            "EQUALS",
                            "ESCAPE",
                            "EVERY",
                            "EXCEPT",
                            "EXCEPTION",
                            "EXEC",
                            "EXECUTE",
                            "EXISTS",
                            "EXIT",
                            "EXTERNAL",
                            "EXTRACT",
                            "FALSE",
                            "FETCH",
                            "FIRST",
                            "FLOAT",
                            "FOR",
                            "FOREIGN",
                            "FORTRAN",
                            "FOUND",
                            "FREE",
                            "FROM",
                            "FULL",
                            "FUNCTION",
                            "GENERAL",
                            "GET",
                            "GLOBAL",
                            "GO",
                            "GOTO",
                            "GRANT",
                            "GROUP",
                            "GROUPING",
                            "HANDLER",
                            "HAVING",
                            "HOST",
                            "HOUR",
                            "IDENTITY",
                            "IF",
                            "IGNORE",
                            "IMMEDIATE",
                            "IN",
                            "INDICATOR",
                            "INITIALIZE",
                            "INITIALLY",
                            "INNER",
                            "INOUT",
                            "INPUT",
                            "INSENSITIVE",
                            "INSERT",
                            "INT",
                            "INTEGER",
                            "INTERSECT",
                            "INTERVAL",
                            "INTO",
                            "IS",
                            "ISOLATION",
                            "ITERATE",
                            "JOIN",
                            "KEY",
                            "LANGUAGE",
                            "LARGE",
                            "LAST",
                            "LATERAL",
                            "LEADING",
                            "LEAVE",
                            "LEFT",
                            "LESS",
                            "LEVEL",
                            "LIKE",
                            "LIMIT",
                            "LIST",
                            "LOCAL",
                            "LOCALTIME",
                            "LOCALTIMESTAMP",
                            "LOCATOR",
                            "LONG",
                            "LOOP",
                            "LOWER",
                            "MAP",
                            "MATCH",
                            "MAX",
                            "MIN",
                            "MINUTE",
                            "MODIFIES",
                            "MODIFY",
                            "MODULE",
                            "MONTH",
                            "NAMES",
                            "NATIONAL",
                            "NATURAL",
                            "NCHAR",
                            "NCLOB",
                            "NEW",
                            "NEXT",
                            "NO",
                            "NONE",
                            "NOT",
                            "NULL",
                            "NULLIF",
                            "NUMBER",
                            "NUMERIC",
                            "OBJECT",
                            "OCTET_LENGTH",
                            "OF",
                            "OFF",
                            "OLD",
                            "ON",
                            "ONLY",
                            "OPEN",
                            "OPERATION",
                            "OPTION",
                            "OR",
                            "ORDER",
                            "ORDINALITY",
                            "OUT",
                            "OUTER",
                            "OUTPUT",
                            "OVERLAPS",
                            "PAD",
                            "PARAMETER",
                            "PARAMETERS",
                            "PARTIAL",
                            "PASCAL",
                            "PATH",
                            "PLI",
                            "POSITION",
                            "POSTFIX",
                            "PRECISION",
                            "PREFIX",
                            "PREORDER",
                            "PREPARE",
                            "PRESERVE",
                            "PRIMARY",
                            "PRIOR",
                            "PRIVILEGES",
                            "PROCEDURE",
                            "PUBLIC",
                            "RAW",
                            "READ",
                            "READS",
                            "REAL",
                            "RECURSIVE",
                            "REDO",
                            "REFERENCES",
                            "RELATIVE",
                            "RESTRICT",
                            "REVOKE",
                            "RIGHT",
                            "ROLLBACK",
                            "ROWS",
                            "SCHEMA",
                            "SCROLL",
                            "SECOND",
                            "SECTION",
                            "SELECT",
                            "SESSION",
                            "SESSION_USER",
                            "SET",
                            "SIZE",
                            "SMALLINT",
                            "SOME",
                            "SPACE",
                            "SQL",
                            "SQLCODE",
                            "SQLERROR",
                            "SQLSTATE",
                            "SUBSTRING",
                            "SUM",
                            "SYSTEM_USER",
                            "TABLE",
                            "TEMPORARY",
                            "THEN",
                            "TIME",
                            "TIMESTAMP",
                            "TIMEZONE_HOUR",
                            "TIMEZONE_MINUTE",
                            "TO",
                            "TRAILING",
                            "TRANSACTION",
                            "TRANSLATE",
                            "TRANSLATION",
                            "TRIM",
                            "TRUE",
                            "TRUNCATE",
                            "UNION",
                            "UNIQUE",
                            "UNKNOWN",
                            "UPDATE",
                            "UPPER",
                            "USAGE",
                            "USER",
                            "USING",
                            "VALUE",
                            "VALUES",
                            "VARCHAR",
                            "VARYING",
                            "VIEW",
                            "WHEN",
                            "WHENEVER",
                            "WHERE",
                            "WITH",
                            "WORK",
                            "WRITE",
                            "YEAR",
                            "ZONE",
                        },
                        CharClass.Keyword,
                        false),
                },
                Texts = new[]
                {
                    new TextPattern("'", "'", '\\', CharClass.String),
                    new TextPattern("/*", "*/", CharClass.Comment, true),
                    new TextPattern("--", CharClass.Comment),
                },
            };
        }

        private static Association CreateInstanceForXml()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.Xml,
                AutoIndentMode = AutoIndentKind.Smart,
                DisplayName = "XML",
                Extensions = new[] { ".xml", },
                Texts = new[]
                {
                    new TextPattern("\"", "\"", CharClass.String, true, false),
                    new TextPattern("'", "'", CharClass.String, true, false),
                    new TextPattern("<![CDATA[", "]]>", CharClass.CDataSection, true, false),
                },
            };
        }

        private static Association CreateInstanceForBatch()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.BatchFile,
                DisplayName = "Batch",
                Extensions = new[] { ".bat", },
                KeywordSet = new[]
                {
                    new KeywordPattern(
                        new []
                        {
                            "assoc",
                            "attrib",
                            "bcdedit",
                            "break",
                            "cacls",
                            "call",
                            "cd",
                            "chcp",
                            "chdir",
                            "chkdsk",
                            "chkntfs",
                            "cls",
                            "cmd",
                            "color",
                            "comp",
                            "compact",
                            "convert",
                            "copy",
                            "date",
                            "del",
                            "dir",
                            "diskcomp",
                            "diskcopy",
                            "diskpart",
                            "doskey",
                            "driverquery",
                            "echo",
                            "echo.",
                            "endlocal",
                            "erase",
                            "exit",
                            "fc",
                            "find",
                            "findstr",
                            "for",
                            "format",
                            "fsutil",
                            "ftype",
                            "goto",
                            "gpresult",
                            "graftabl",
                            "icacls",
                            "if",
                            "label",
                            "md",
                            "mkdir",
                            "mklink",
                            "mode",
                            "more",
                            "move",
                            "openfiles",
                            "path",
                            "pause",
                            "popd",
                            "print",
                            "prompt",
                            "pushd",
                            "rd",
                            "recover",
                            "ren",
                            "rename",
                            "replace",
                            "rmdir",
                            "robocopy",
                            "sc",
                            "schtasks",
                            "set",
                            "setlocal",
                            "shift",
                            "shutdown",
                            "sort",
                            "start",
                            "subst",
                            "systeminfo",
                            "taskkill",
                            "tasklist",
                            "time",
                            "title",
                            "tree",
                            "type",
                            "ver",
                            "verify",
                            "wmic",
                            "xcopy",
                        },
                        CharClass.Keyword,
                        false),
                    new KeywordPattern(
                        new[]
                        {
                            "AUX",
                            "COM0",
                            "COM1",
                            "COM2",
                            "COM3",
                            "COM4",
                            "COM5",
                            "COM6",
                            "COM7",
                            "COM8",
                            "COM9",
                            "CON",
                            "LPT0",
                            "LPT1",
                            "LPT2",
                            "LPT3",
                            "LPT4",
                            "LPT5",
                            "LPT6",
                            "LPT7",
                            "LPT8",
                            "LPT9",
                            "NUL",
                            "PRN",
                        },
                        CharClass.Keyword2),
                },
                Texts = new[]
                {
                    new TextPattern("REM", CharClass.Comment, false),
                    new TextPattern("::", CharClass.Comment),
                },
                Regex = new[]
                {
                    new RegexPattern(@"(?<=if )not", CharClass.Keyword, false),
                    new RegexPattern(@"@?echo (on|off)", CharClass.Keyword2, false),
                    new RegexPattern(@"%\w+(:[^%]+)?%", CharClass.Variable),
                    new RegexPattern(@"%~?[0-9\*]", CharClass.Variable),
                    new RegexPattern(@"%%?~?[fdpnxsatz]*[0-9a-zA-Z]", CharClass.Variable),
                    new RegexPattern(@"^:\w+", CharClass.Label, false),
                },
            };
        }

        private static Association CreateInstanceForIni()
        {
            return new Association()
            {
                LanguageMode = LanguageKind.Ini,
                AutoIndentMode = AutoIndentKind.None,
                DisplayName = "INI",
                Extensions = new[] { ".ini", ".inf" },
                Regex = new[]
                {
                    new RegexPattern(@"^\s*(\[[^\]]+\])", CharClass.Heading1),
                    new RegexPattern(@"^\s*([^=]+)\s*[=:]", CharClass.Property),
                    new RegexPattern(@"^\s*([;#!].*)", CharClass.Comment),
                },
            };
        }
    }
}